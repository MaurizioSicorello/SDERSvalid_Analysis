)
fit <- ctFit(
datalong = df,
ctmodelobj = model,
id = "PARTICIPANT_ID",
time = "time"
)
summary(fit)
install.packages("ctsemOMX")
library("ctsemOMX")
model <- ctModel(
type = "ct",  # continuous time
manifestNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
latentNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
Tpoints = NA,  # continuous time
MANIFESTVAR = diag(0, 3),  # no measurement error
LAMBDA = diag(1, 3),       # manifest variables = latent states
DRIFT = matrix("drift", 3, 3),  # estimate all cross-lagged and auto-effects
CINT = rep(0, 3)  # no constant intercept
)
fit <- ctFit(
datalong = df,
ctmodelobj = model,
id = "PARTICIPANT_ID",
time = "time"
)
model <- ctModel(
type = "ct",
manifestNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
latentNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
Tpoints = NA,
MANIFESTVAR = diag(0, 3),
LAMBDA = diag(1, 3),
DRIFT = matrix("drift", 3, 3),
CINT = rep(0, 3)
)
fit <- ctFit(
datalong = df,
ctmodelobj = model,
id = "PARTICIPANT_ID",
time = "time"
)
model <- ctModel(
type = "stanct",
manifestNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
latentNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
Tpoints = NA,
MANIFESTVAR = diag(0, 3),
LAMBDA = diag(1, 3),
DRIFT = matrix("drift", 3, 3),
CINT = rep(0, 3)
)
fit <- ctStanFit(
datalong = df,  # must be in long format
ctmodelobj = model,
id = "PARTICIPANT_ID",
time = "time",  # numeric time variable
optimize = TRUE  # fast ML estimation (can change to FALSE for full Bayes)
)
fit <- ctStanFit(
datalong = df,
ctmodelobj = model,
id = "PARTICIPANT_ID",
time = "time",
optimize = TRUE
)
?ctFit
diag(3)
matrix(c("AutoSTEP", "HRtoSTEP","STEPtoHR", "AutoHR"), 2, 2, byrow=T)
matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE)
?ctModel
persModel_ct <- ctModel(type="stanct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
CINT=matrix(c(0, 0, 0),ncol=1),
DIFFUSION='auto')
persModel_ct_fit <- ctStanFit(datalong=df,
ctstanmodel=persModel_ct,
optimize=FALSE,
priors=TRUE,
optimcontrol=list(finishsamples=10000) )
persModel_ct_fit <- ctStanFit(datalong=df,
ctstanmodel=persModel_ct,
optimize=FALSE,
priors=TRUE,
id = "PARTICIPANT_ID",
time = "time",
optimcontrol=list(finishsamples=10000))
?ctfit
?ctFit
?ctFit
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "PARTICIPANT_ID"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
names(df)
head(df)
View(df)
names(df)
df[, c("Time_dayHours",
"COMPLETED_TS_lag",
"Time")]
df <- df %>%
mutate(
# Convert string times to POSIXct â€” assume same date as lag for now
CURRENT_TS = as.POSIXct(ifelse(is.na(COMPLETED_TS_lag),
paste0("2023-09-01 ", Time),  # dummy date for first obs
paste0(substr(COMPLETED_TS_lag, 1, 10), " ", Time)),
tz = "UTC"),
COMPLETED_TS_lag = ymd_hms(COMPLETED_TS_lag, tz = "UTC")
) %>%
group_by(PARTICIPANT_ID) %>%
arrange(CURRENT_TS) %>%
mutate(
time_since_start_hours = as.numeric(difftime(CURRENT_TS, first(CURRENT_TS), units = "hours"))
) %>%
ungroup()
df[,c("time_since_start_hours", "DayInd", "OccInd", "time")]
df[,c("time_since_start_hours", "DayInd", "OccInd", "Time")]
print(df[,c("time_since_start_hours", "DayInd", "OccInd", "Time")], n=100)
print(df[,c("PARTICIPANT_ID", "time_since_start_hours", "DayInd", "OccInd", "Time")], n=100)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "PARTICIPANT_ID",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
?ctFit
persModel_ct_fit <- ctFit(dat=df,
ctmodelobj=persModel_ct)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "PARTICIPANT_ID",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
persModel_ct_fit <- ctFit(dat=df,
ctmodelobj=persModel_ct)
persModel_ct_fit <- ctStanFit(datalong=df,
ctmodelobj=persModel_ct,
priors=TRUE)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "PARTICIPANT_ID",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
persModel_ct_fit <- ctStanFit(datalong=df,
ctmodelobj=persModel_ct,
priors=TRUE)
class(df$time_since_start_hours)
class(df$id)
class(df$PARTICIPANT_ID)
df <- df %>%
mutate(
id = as.numeric(as.factor(PARTICIPANT_ID))  # convert to numeric id
) %>%
arrange(id, time_since_start_hours)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "id",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
persModel_ct_fit <- ctStanFit(datalong=df,
ctmodelobj=persModel_ct,
priors=TRUE)
persModel_ct_fit <- ctFit(datalong=df,
ctmodelobj=persModel_ct,
priors=TRUE)
persModel_ct_fit <- ctFit(dat=df,
ctmodelobj=persModel_ct)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "id",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
persModel_ct_fit <- ctFit(dat=df,
ctmodelobj=persModel_ct)
ctStanFit(
datalong = df,
ctstanmodel = ctStanModel(your_model),
id = "id",
time = "time_since_start_hours"
)
ctStanFit(
datalong = df,
ctstanmodel = ctStanModel(persModel_ct_fit),
id = "id",
time = "time_since_start_hours"
)
ctStanFit(
datalong = df,
ctstanmodel = ctStanModel(persModel_ct),
id = "id",
time = "time_since_start_hours"
)
# 1. Define your ctModel (you already did this)
persModel_ct <- ctModel(
type = "ct",
n.latent = 3,
n.manifest = 3,
manifestNames = c("affect_valence_PMcen_scaled",
"SDERS_Total_PMcen_scaled",
"stressors_PMcen_scaled"),
latentNames = c("Affect", "Regulation", "Stressors"),
LAMBDA = diag(3),
DRIFT = matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
CINT = matrix("0", 3, 1)
)
# 2. Convert to ctStanModel *in a separate step*
stanModel <- ctStanModel(persModel_ct)
head(df)
df <- df %>%
mutate(
id = as.numeric(as.factor(PARTICIPANT_ID))  # convert to numeric id
) %>%
arrange(id, time_since_start_hours)
head(df)
df[,c("PARTICIPANT_ID", "id", "COMPLETED_TS", "Time", "time_since_start_hours")]
df <- df %>%
mutate(
id = as.numeric(as.factor(PARTICIPANT_ID))  # convert to numeric id
) %>%
arrange(id, time_since_start_hours)
df[,c("PARTICIPANT_ID", "id", "COMPLETED_TS", "Time", "time_since_start_hours")]
print(df[,c("PARTICIPANT_ID", "id", "COMPLETED_TS", "Time", "time_since_start_hours")], n=100)
print(df[,c("PARTICIPANT_ID", "id", "DayInd", "COMPLETED_TS", "Time", "time_since_start_hours")], n=100)
df <- read.csv(here::here("data", "SDERSvalid_DailyLife_data_preprocessed.csv"))
df <- df[order(df$PARTICIPANT_ID, df$DayInd, df$Time), ]
print(df[,c("PARTICIPANT_ID", "id", "DayInd", "COMPLETED_TS", "Time", "time_since_start_hours")], n=100)
print(df[,c("PARTICIPANT_ID", "id", "DayInd", "COMPLETED_TS", "Time")], n=100)
print(df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time")], n=100)
df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time")]
df <- df %>%
mutate(
# Convert string times to POSIXct â€” assume same date as lag for now
CURRENT_TS = as.POSIXct(ifelse(is.na(COMPLETED_TS_lag),
paste0("2023-09-01 ", Time),  # dummy date for first obs
paste0(substr(COMPLETED_TS_lag, 1, 10), " ", Time)),
tz = "UTC"),
COMPLETED_TS_lag = ymd_hms(COMPLETED_TS_lag, tz = "UTC")
) %>%
group_by(PARTICIPANT_ID) %>%
arrange(CURRENT_TS) %>%
mutate(
time_since_start_hours = as.numeric(difftime(CURRENT_TS, first(CURRENT_TS), units = "hours"))
) %>%
ungroup()
df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time")]
df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time","time_since_start_hours")]
df <- df %>%
mutate(
# Convert string times to POSIXct â€” assume same date as lag for now
CURRENT_TS = as.POSIXct(ifelse(is.na(COMPLETED_TS_lag),
paste0("2023-09-01 ", Time),  # dummy date for first obs
paste0(substr(COMPLETED_TS_lag, 1, 10), " ", Time)),
tz = "UTC"),
COMPLETED_TS_lag = ymd_hms(COMPLETED_TS_lag, tz = "UTC")
) %>%
group_by(PARTICIPANT_ID) %>%
#arrange(CURRENT_TS) %>%
mutate(
time_since_start_hours = as.numeric(difftime(CURRENT_TS, first(CURRENT_TS), units = "hours"))
) %>%
ungroup()
df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time","time_since_start_hours")]
library("ctsem")
source(here::here("functions", "MultilevelRSA_25082019.R"))
df <- read.csv(here::here("data", "SDERSvalid_DailyLife_data_preprocessed.csv"))
df <- df[order(df$PARTICIPANT_ID, df$DayInd, df$Time), ]
df$S.DERS_NonAccept_mean18 <- rowMeans(df[, c('S.DERS8_ESM','S.DERS4_ESM','S.DERS1_ESM','S.DERS5_ESM','S.DERS12_ESM','S.DERS20_ESM','S.DERS18_ESM')])
df$S.DERS_Modulate_mean18 <- rowMeans(df[, c('S.DERS13_ESM','S.DERS17_ESM','S.DERS3_ESM','S.DERS21_ESM')])
df$S.DERS_Awareness_mean18 <- rowMeans(df[, c('S.DERS6_ESM.r','S.DERS11_ESM.r','S.DERS2_ESM.r','S.DERS19_ESM.r','S.DERS16_ESM.r')])
df$S.DERS_Clarity_mean18 <- rowMeans(df[, c('S.DERS14_ESM','S.DERS7_ESM')])
df$S.DERS_Total_mean18 <- rowMeans(df[, c('S.DERS1_ESM','S.DERS2_ESM.r','S.DERS3_ESM','S.DERS4_ESM','S.DERS5_ESM','S.DERS6_ESM.r','S.DERS7_ESM',
'S.DERS8_ESM', 'S.DERS11_ESM.r','S.DERS12_ESM','S.DERS13_ESM','S.DERS14_ESM',
'S.DERS16_ESM.r','S.DERS17_ESM','S.DERS18_ESM','S.DERS19_ESM.r','S.DERS20_ESM','S.DERS21_ESM')])
df <- df %>%
group_by(PARTICIPANT_ID) %>%
mutate(
S.DERS_Total_PM = mean(S.DERS_Total_mean18, na.rm = TRUE),
S.DERS_NonAccept_PM = mean(S.DERS_NonAccept_mean18, na.rm = TRUE),
S.DERS_Modulate_PM = mean(S.DERS_Modulate_mean18, na.rm = TRUE),
S.DERS_Awareness_PM = mean(S.DERS_Awareness_mean18, na.rm = TRUE),
S.DERS_Clarity_PM = mean(S.DERS_Clarity_mean18, na.rm = TRUE),
affect_valence_PM = mean(AFFECT_ESM_X, na.rm = TRUE),
affect_arousal_PM = mean(AFFECT_ESM_Y, na.rm = TRUE),
stressors_PM = mean(NE.EVENT, na.rm = TRUE),
) %>%
ungroup() %>%
as.data.frame()
df$S.DERS_Total_scaled <- scale(df$S.DERS_Total_mean18)
df$S.DERS_NonAccept_scaled = scale(df$S.DERS_NonAccept_mean18)
df$S.DERS_Modulate_scaled = scale(df$S.DERS_Modulate_mean18)
df$S.DERS_Awareness_scaled = scale(df$S.DERS_Awareness_mean18)
df$S.DERS_Clarity_scaled = scale(df$S.DERS_Clarity_mean18)
df$S.DERS_Total_PMcen <- df$S.DERS_Total_mean18 - df$S.DERS_Total_PM
df$S.DERS_Total_PMcen_scaled <- scale(df$S.DERS_Total_PMcen)
df$affect_valence_PMcen <- df$AFFECT_ESM_X - df$affect_valence_PM
df$affect_valence_PMcen_scaled <- scale(df$affect_valence_PMcen)
df$affect_valence_PM_scaled <- scale(df$affect_valence_PM)
df$affect_arousal_PMcen <- df$AFFECT_ESM_Y - df$affect_arousal_PM
df$affect_arousal_PMcen_scaled <- scale(df$affect_arousal_PMcen)
df$affect_arousal_PM_scaled <- scale(df$affect_arousal_PM)
df$stressors_PMcen <- df$NE.EVENT - df$stressors_PM
df$stressors_PMcen_scaled <- scale(df$stressors_PMcen)
df$stressors_PM_scaled <- scale(df$stressors_PM)
df$S.DERS_Total_PM_scaled <- scale(df$S.DERS_Total_PM)
df$DERS_scaled <- scale(df$DERS_Total_mean)
df$S.DERS_scaled <- scale(df$S.DERS_Total_mean)
df$NEO_scaled <- scale(df$NEO_N_mean)
df$DASS_scaled <- scale(df$DASS_Total_mean)
df$CTQ_scaled <- scale(df$CTQ_Total_mean)
df$Time_dayHours <- hour(hms(df$Time))
df <- df %>%
mutate(
# Convert string times to POSIXct â€” assume same date as lag for now
CURRENT_TS = as.POSIXct(ifelse(is.na(COMPLETED_TS_lag),
paste0("2023-09-01 ", Time),  # dummy date for first obs
paste0(substr(COMPLETED_TS_lag, 1, 10), " ", Time)),
tz = "UTC"),
COMPLETED_TS_lag = ymd_hms(COMPLETED_TS_lag, tz = "UTC")
) %>%
group_by(PARTICIPANT_ID) %>%
#arrange(CURRENT_TS) %>%
mutate(
time_since_start_hours = as.numeric(difftime(CURRENT_TS, first(CURRENT_TS), units = "hours"))
) %>%
ungroup()
df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time","time_since_start_hours")]
print(df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time","time_since_start_hours")], n=100)
df <- read.csv(here::here("data", "SDERSvalid_DailyLife_data_preprocessed.csv"))
df <- df[order(df$PARTICIPANT_ID, df$DayInd, df$Time), ]
df$S.DERS_NonAccept_mean18 <- rowMeans(df[, c('S.DERS8_ESM','S.DERS4_ESM','S.DERS1_ESM','S.DERS5_ESM','S.DERS12_ESM','S.DERS20_ESM','S.DERS18_ESM')])
df$S.DERS_Modulate_mean18 <- rowMeans(df[, c('S.DERS13_ESM','S.DERS17_ESM','S.DERS3_ESM','S.DERS21_ESM')])
df$S.DERS_Awareness_mean18 <- rowMeans(df[, c('S.DERS6_ESM.r','S.DERS11_ESM.r','S.DERS2_ESM.r','S.DERS19_ESM.r','S.DERS16_ESM.r')])
df$S.DERS_Clarity_mean18 <- rowMeans(df[, c('S.DERS14_ESM','S.DERS7_ESM')])
df$S.DERS_Total_mean18 <- rowMeans(df[, c('S.DERS1_ESM','S.DERS2_ESM.r','S.DERS3_ESM','S.DERS4_ESM','S.DERS5_ESM','S.DERS6_ESM.r','S.DERS7_ESM',
'S.DERS8_ESM', 'S.DERS11_ESM.r','S.DERS12_ESM','S.DERS13_ESM','S.DERS14_ESM',
'S.DERS16_ESM.r','S.DERS17_ESM','S.DERS18_ESM','S.DERS19_ESM.r','S.DERS20_ESM','S.DERS21_ESM')])
df <- df %>%
group_by(PARTICIPANT_ID) %>%
mutate(
S.DERS_Total_PM = mean(S.DERS_Total_mean18, na.rm = TRUE),
S.DERS_NonAccept_PM = mean(S.DERS_NonAccept_mean18, na.rm = TRUE),
S.DERS_Modulate_PM = mean(S.DERS_Modulate_mean18, na.rm = TRUE),
S.DERS_Awareness_PM = mean(S.DERS_Awareness_mean18, na.rm = TRUE),
S.DERS_Clarity_PM = mean(S.DERS_Clarity_mean18, na.rm = TRUE),
affect_valence_PM = mean(AFFECT_ESM_X, na.rm = TRUE),
affect_arousal_PM = mean(AFFECT_ESM_Y, na.rm = TRUE),
stressors_PM = mean(NE.EVENT, na.rm = TRUE),
) %>%
ungroup() %>%
as.data.frame()
df$S.DERS_Total_scaled <- scale(df$S.DERS_Total_mean18)
df$S.DERS_NonAccept_scaled = scale(df$S.DERS_NonAccept_mean18)
df$S.DERS_Modulate_scaled = scale(df$S.DERS_Modulate_mean18)
df$S.DERS_Awareness_scaled = scale(df$S.DERS_Awareness_mean18)
df$S.DERS_Clarity_scaled = scale(df$S.DERS_Clarity_mean18)
df$S.DERS_Total_PMcen <- df$S.DERS_Total_mean18 - df$S.DERS_Total_PM
df$S.DERS_Total_PMcen_scaled <- scale(df$S.DERS_Total_PMcen)
df$affect_valence_PMcen <- df$AFFECT_ESM_X - df$affect_valence_PM
df$affect_valence_PMcen_scaled <- scale(df$affect_valence_PMcen)
df$affect_valence_PM_scaled <- scale(df$affect_valence_PM)
df$affect_arousal_PMcen <- df$AFFECT_ESM_Y - df$affect_arousal_PM
df$affect_arousal_PMcen_scaled <- scale(df$affect_arousal_PMcen)
df$affect_arousal_PM_scaled <- scale(df$affect_arousal_PM)
df$stressors_PMcen <- df$NE.EVENT - df$stressors_PM
df$stressors_PMcen_scaled <- scale(df$stressors_PMcen)
df$stressors_PM_scaled <- scale(df$stressors_PM)
df$S.DERS_Total_PM_scaled <- scale(df$S.DERS_Total_PM)
df$DERS_scaled <- scale(df$DERS_Total_mean)
df$S.DERS_scaled <- scale(df$S.DERS_Total_mean)
df$NEO_scaled <- scale(df$NEO_N_mean)
df$DASS_scaled <- scale(df$DASS_Total_mean)
df$CTQ_scaled <- scale(df$CTQ_Total_mean)
df$Time_dayHours <- hour(hms(df$Time))
df <- df %>%
mutate(
# Use the actual completed timestamp â€” already in full datetime format
COMPLETED_TS_parsed = ymd_hms(COMPLETED_TS, tz = "Europe/Berlin"),
id = as.numeric(as.factor(PARTICIPANT_ID))
) %>%
arrange(id, COMPLETED_TS_parsed) %>%
group_by(id) %>%
mutate(
time_since_start_hours = as.numeric(difftime(COMPLETED_TS_parsed, first(COMPLETED_TS_parsed), units = "hours"))
) %>%
ungroup()
df %>%
group_by(id) %>%
summarise(is_ordered = all(diff(time_since_start_hours) >= 0))
print(df[,c("PARTICIPANT_ID", "DayInd", "COMPLETED_TS", "Time","time_since_start_hours")], n=100)
df <- df %>%
mutate(
id = as.numeric(as.factor(PARTICIPANT_ID))  # convert to numeric id
) %>%
arrange(id, time_since_start_hours)
print(df[,c("PARTICIPANT_ID", "id", "DayInd", "COMPLETED_TS", "Time","time_since_start_hours")], n=100)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("_affect_valence_PMcen_scaled_", "_SDERS_Total_PMcen_scaled_", "_stressors_PMcen_scaled_"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "id",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
persModel_ct_fit <- ctFit(dat=df,
ctmodelobj=persModel_ct)
df %>%
group_by(id, time_since_start_hours) %>%
filter(n() > 1)
persModel_ct <- ctModel(type="ct",
n.latent=3, n.manifest=3,
manifestNames=c("affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled"),
latentNames=c("X1", "X2", "X3"),
LAMBDA=diag(3),
DRIFT=matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",    "drift_Stressors_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation","drift_Stressors_Regulation",
"drift_Affect_Stressors", "drift_Regulation_Stressors", "drift_Stressors_Stressors"
), 3, 3, byrow = TRUE),
id = "id",
time = "time_since_start_hours"
#CINT=matrix(c(0, 0, 0),ncol=1),
)
persModel_ct_fit <- ctFit(dat=df,
ctmodelobj=persModel_ct)
