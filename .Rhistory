grid$affect_arousalValence_PM <- 0
# Predict using the model
predictions <- predict(model, newdata = grid, level = 0)
# Add predictions to the grid
grid$predicted_S_DERS_Total_scaled <- predictions
return(grid)
}
# Usage Example
valence_range <- seq(-2, 2, length.out = 50)
arousal_range <- seq(-1, 1, length.out = 3)
predicted_df <- predict_affect(affectModel, valence_range, arousal_range)
predicted_df$affect_arousal_PMcen_scaled <- factor(ifelse(predicted_df$affect_arousal_PMcen_scaled == -1, "-1\u00b7SD", ifelse(predicted_df$affect_arousal_PMcen_scaled == 0, "Mean", "+1\u00b7SD")), levels=c("-1\u00b7SD", "Mean", "+1\u00b7SD"))
ggplot(data=predicted_df, aes(y=predicted_S_DERS_Total_scaled, x=affect_valence_PMcen_scaled, colour=factor(affect_arousal_PMcen_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal")  +
ylab("S-DERS predicted value") +
xlab("Valence") +
ylim(-0.45, 0.6) +
theme(legend.position = "top", legend.direction = "horizontal") +
ggtitle("Within-person")
affectPlot_within <- ggplot(data=predicted_df, aes(y=predicted_S_DERS_Total_scaled, x=affect_valence_PMcen_scaled, colour=factor(affect_arousal_PMcen_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal")  +
ylab("S-DERS predicted value") +
xlab("Valence") +
ylim(-0.45, 0.6) +
theme(legend.position = "top", legend.direction = "horizontal") +
ggtitle("Within-person")
predict_affect_between <- function(model, valence_range, arousal_range) {
# Create a grid of values for the predictors
grid <- expand.grid(
affect_valence_PM_scaled = valence_range,
affect_arousal_PM_scaled = arousal_range
)
# Compute quadratic and interaction terms for the predictors
grid$affect_valence_PM_scaled2 <- grid$affect_valence_PM_scaled^2
grid$affect_arousal_PM_scaled2 <- grid$affect_arousal_PM_scaled^2
grid$affect_arousalValence_PM <- grid$affect_valence_PM_scaled * grid$affect_arousal_PM_scaled
# Set non-centered variables to 0 (as specified)
grid$affect_valence_PMcen_scaled <- 0
grid$affect_arousal_PMcen_scaled <- 0
grid$affect_valence_PMcen_scaled2 <- 0
grid$affect_arousal_PMcen_scaled2 <- 0
grid$affect_arousalValence_PMcen <- 0
# Predict using the model
predictions <- predict(model, newdata = grid, level = 0)
# Add predictions to the grid
grid$predicted_S_DERS_Total_scaled <- predictions
return(grid)
}
# Usage Example
valence_range <- seq(-2, 2, length.out = 50)
arousal_range <- seq(-1, 1, length.out = 3)
predicted_df_between <- predict_affect_between(affectModel, valence_range, arousal_range)
predicted_df_between$affect_arousal_PM_scaled <- factor(ifelse(predicted_df_between$affect_arousal_PM_scaled == -1, "-1\u00b7SD", ifelse(predicted_df_between$affect_arousal_PM_scaled == 0, "Mean", "+1\u00b7SD")), levels=c("-1\u00b7SD", "Mean", "+1\u00b7SD"))
affectPlot_between <- ggplot(data=predicted_df_between, aes(y=predicted_S_DERS_Total_scaled, x=affect_valence_PM_scaled, colour=factor(affect_arousal_PM_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal")  +
ylab("S-DERS predicted value") +
xlab("Valence") +
ylim(-0.45, 0.6) +
theme(legend.position = "top", legend.direction = "horizontal") +
ggtitle("Between-person")
ggsave(here::here("manuscripts", "SDERSvalid_dailyLife","figures", "arousalValenceInteraction_between.svg"), device="svg")
plot_grid(affectPlot_within, affectPlot_between, nrow=1)
plot_grid(affectPlot_within, affectPlot_between, nrow=1)
affectPlot_within
affectPlot_between
plot_grid(affectPlot_within, affectPlot_between, nrow=1)
cowplot::plot_grid(affectPlot_within, affectPlot_between, nrow=1)
library(patchwork)
# Remove x/y labels and legends from individual plots
affectPlot_within <- ggplot(data = predicted_df,
aes(x = affect_valence_PMcen_scaled,
y = predicted_S_DERS_Total_scaled,
colour = factor(affect_arousal_PMcen_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal", title = "Within-person") +
theme(
legend.position = "top",
legend.direction = "horizontal",
axis.title = element_blank()
) +
ylim(-0.45, 0.6)
affectPlot_between <- ggplot(data = predicted_df_between,
aes(x = affect_valence_PM_scaled,
y = predicted_S_DERS_Total_scaled,
colour = factor(affect_arousal_PM_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal", title = "Between-person") +
theme(
legend.position = "none",
axis.title = element_blank()
) +
ylim(-0.45, 0.6)
# Combine plots with patchwork, add shared labels
combined_plot <- affectPlot_within + affectPlot_between +
plot_layout(guides = "collect") &
theme(legend.position = "top")
# Add shared axis labels with patchwork annotation
final_plot <- combined_plot +
plot_annotation(
title = NULL,
theme = theme(
plot.margin = margin(10, 10, 10, 10),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10))
)
) &
labs(x = "Valence", y = "S-DERS predicted value")
final_plot
# Add shared axis labels with patchwork annotation
final_plot <- combined_plot +
plot_annotation(
title = NULL,
theme = theme(
plot.margin = margin(10, 10, 10, 10),
axis.title.x = element_text(margin = margin(t = 10)),
axis.title.y = element_text(margin = margin(r = 10))
)
) &
labs(x = "Valence", y = "S-DERS predicted value")
final_plot <- affectPlot_within + affectPlot_between +
plot_layout(ncol = 2, guides = "collect") &
theme(legend.position = "top") &
labs(
x = "Valence",
y = "S-DERS predicted value"
)
final_plot
# Remove x/y labels and legends from individual plots
affectPlot_within <- ggplot(data = predicted_df,
aes(x = affect_valence_PMcen_scaled,
y = predicted_S_DERS_Total_scaled,
colour = factor(affect_arousal_PMcen_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal") +
theme(
legend.position = "top",
legend.direction = "horizontal",
axis.title = element_blank()
) +
ylim(-0.45, 0.6)
affectPlot_between <- ggplot(data = predicted_df_between,
aes(x = affect_valence_PM_scaled,
y = predicted_S_DERS_Total_scaled,
colour = factor(affect_arousal_PM_scaled))) +
geom_line() +
theme_bw() +
labs(color = "Arousal") +
theme(
legend.position = "none",
axis.title = element_blank()
) +
ylim(-0.45, 0.6)
final_plot <- affectPlot_within + affectPlot_between +
plot_layout(ncol = 2, guides = "collect") &
theme(legend.position = "top") &
labs(
x = "Valence",
y = "S-DERS predicted value"
)
final_plot
ggsave(here::here("manuscripts", "SDERSvalid_dailyLife","figures", "affectPlots.png"), final_plot, width = 7, height = 4.5, dpi = 300)
ggsave(here::here("manuscripts", "SDERSvalid_dailyLife","figures", "affectPlots.png"), final_plot, width = 7, height = 3.5, dpi = 300)
createInteractionPlot <- function(model, maineffectTerm = "stressors_PMcen_scaled", interactionTerm, interactionLabel) {
# prepare predictions with SEs
interactionTermName <- deparse(substitute(interactionTerm))
xlevels_list <- setNames(list(c(-1, 0, 1)), interactionTermName)
ef <- effect(
term = paste0(maineffectTerm, ":", interactionTermName),
xlevels = xlevels_list,
mod = model
)
ef_df <- as.data.frame(ef)
ef_df[[interactionTermName]] <- factor(
ifelse(ef_df[[interactionTermName]] == -1, "-1路SD",
ifelse(ef_df[[interactionTermName]] == 0, "Mean", "+1路SD")),
levels = c("-1路SD", "Mean", "+1路SD")
)
# Create plot
ggplot(ef_df, aes(x = get(maineffectTerm), y = fit, color = factor(get(interactionTermName)), group = factor(get(interactionTermName)))) +
geom_line(size = 0.8) +
geom_ribbon(aes(ymin=fit-se, ymax=fit+se, fill=factor(get(interactionTermName))), alpha=0.2, colour = NA) +
labs(x= "Stressors", y="S-DERS", color=interactionLabel, fill=interactionLabel) +
theme_classic() +
ylim(-2, 2) +
theme(axis.line = element_line(size = 0.5)) +
theme(axis.text=element_text(size=6), axis.title=element_text(size=8), axis.ticks = element_line(colour = "black"),
legend.title=element_text(size=6), legend.text=element_text(size=5), legend.key.size = unit(0.3, "cm"),
legend.justification = c(1, 0), legend.position = c(0.95, 0.02)) +
scale_color_manual(values = c("darkred", "darkblue", "darkgreen")) +
scale_fill_manual(values = c("darkred", "darkblue", "darkgreen"))
}
# trait DERS
stressModel_traitDERS <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*DERS_scaled + stressors_PM_scaled*DERS_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_traitDERS)
DERSplot <- createInteractionPlot(stressModel_traitDERS, interactionTerm = DERS_scaled, interactionLabel = "DERS")
# S-DERS after mood induction
stressModel_SDERSmoodInd <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*S.DERS_scaled + stressors_PM_scaled*S.DERS_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_SDERSmoodInd)
SDERSplot <- createInteractionPlot(stressModel_SDERSmoodInd, interactionTerm = S.DERS_scaled, interactionLabel = "S-DERS (Mood induction)")
# Neuroticism
stressModel_NEO <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*NEO_scaled + stressors_PM_scaled*NEO_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_NEO)
NEOplot <- createInteractionPlot(stressModel_NEO, interactionTerm = NEO_scaled, interactionLabel = "Neuroticism")
# DASS
stressModel_DASS <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*DASS_scaled + stressors_PM_scaled*DASS_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_DASS)
DASSplot <- createInteractionPlot(stressModel_DASS, interactionTerm = DASS_scaled, interactionLabel = "DASS")
DERSplot
DERSplot + ylab(NULL)
DERSplot
DERSplot + ggtitle("Trait DERS")
SDERSplot <- SDERSplot + ggitle("S-DERS (Mood induction)")  + theme(axis.title.y = element_text(color = "white"))
SDERSplot <- createInteractionPlot(stressModel_SDERSmoodInd, interactionTerm = S.DERS_scaled, interactionLabel = "S-DERS (Mood induction)")
SDERSplot
SDERSplot <- SDERSplot + ggitle("S-DERS (Mood induction)")  + theme(axis.title.y = element_text(color = "white"))
SDERSplot <- SDERSplot + ggtitle("S-DERS (Mood induction)")  + theme(axis.title.y = element_text(color = "white"))
SDERSplot
# Neuroticism
stressModel_NEO <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*NEO_scaled + stressors_PM_scaled*NEO_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_NEO)
NEOplot <- createInteractionPlot(stressModel_NEO, interactionTerm = NEO_scaled, interactionLabel = "Neuroticism")
NEOplot <- NEOplot + ggtitle("Neuroticism")
NEOplot
# DASS
stressModel_DASS <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*DASS_scaled + stressors_PM_scaled*DASS_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_DASS)
DASSplot <- createInteractionPlot(stressModel_DASS, interactionTerm = DASS_scaled, interactionLabel = "DASS")
DASSplot <- DASSplot + ggtitle("DASS") + theme(axis.title.y = element_text(color = "white"))
plot_grid(DERSplot, SDERSplot, NEOplot, DASSplot, nrow=2)
cowplot::plot_grid(DERSplot, SDERSplot, NEOplot, DASSplot, nrow=2)
DERSplot <- DERSplot + ggtitle("Trait DERS")
DERSplot
cowplot::plot_grid(DERSplot, SDERSplot, NEOplot, DASSplot, nrow=2)
ggsave(here::here("manuscripts", "SDERSvalid_dailyLife","figures", "crossLevelInteraction_panelPlot.png"), device="png", width=7, height=6)
summary(stressModel_traitDERS)
conf.int(stressModel_traitDERS)
intervals(stressModel_traitDERS)
summary(stressModel_traitDERS)
intervals(stressModel_traitDERS)
intervals(stressModel_SDERSmoodInd)
intervals(stressModel_NEO)
intervals(stressModel_DASS)
df <- df %>%
mutate(
id = as.numeric(as.factor(PARTICIPANT_ID))  # convert to numeric id
) %>%
arrange(id, time_since_start_hours)
df %>%
group_by(id, time_since_start_hours) %>%
filter(n() > 1)
df$time <- df$time_since_start_hours
df$SDERS_Total_PMcen_scaled <- df$S.DERS_Total_PMcen_scaled
df_ctSEM <- df[,c("id", "time", "affect_valence_PMcen_scaled", "SDERS_Total_PMcen_scaled", "stressors_PMcen_scaled")]
df$SDERS_Total_scaled <- df$S.DERS_Total_scaled
df$Stressors_scaled <- scale(df$NE.EVENT)
df$affect_valence_scaled <- scale(df$AFFECT_ESM_X)
persModel_ct_td <- ctModel(type = "ct",
n.latent = 2,  # only affect and SDERS now
n.manifest = 2,
n.TDpred = 1,
manifestNames = c("affect_valence_scaled", "SDERS_Total_scaled"),
latentNames = c("affect", "SDERS"),
TDpredNames = "Stressors_scaled",
LAMBDA = diag(2),  # identity matrix for manifest-latent mapping
DRIFT = matrix(c(
"drift_Affect_Affect",    "drift_Regulation_Affect",
"drift_Affect_Regulation","drift_Regulation_Regulation"
), 2, 2, byrow = TRUE)
)
persModel_ct_fit2 <- ctStanFit(datalong=df,
ctstanmodel=persModel_ct_td)
ctsemPlot <- ctStanDiscretePars(persModel_ct_fit2, plot=TRUE, indices = 'all', times = seq(from=0, to=48, by = 1), observational=TRUE)
ctsemPlot
ctsemPlot +
labs(
title = NULL,
y = "Auto- and cross-correlations",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL
) +
theme(legend.position=c(.7,.4))
ctsemPlot +
labs(
title = NULL,
y = "Auto- and cross-correlations",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL
) +
theme(legend.position=c(.4,.4))
ctsemPlot +
labs(
title = NULL,
y = "Auto- and cross-correlations",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL
) +
theme(legend.position=c(.7,.3))
ctsemPlot +
labs(
title = NULL,
y = "Auto- and cross-correlations",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("affect.affect" = "affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS"),
name = NULL
) +
theme(legend.position=c(.7,.2))
ctsemPlot +
labs(
title = NULL,
y = "Auto- and cross-correlations",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("affect.affect" = "affect -> affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS -> S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("affect.affect" = "affect -> affect", "SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS", "SDERS.SDERS" = "S-DERS -> S-DERS"),
name = NULL
) +
theme(legend.position=c(.7,.2))
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","crosscorrelation_plot.png"),
device = "png",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
CRplot <- ctStanDiscretePars(persModel_ct_fit2, plot=TRUE, indices = 'CR', times = seq(from=0, to=48, by = 1), observational=TRUE)
CRplot +
labs(
title = NULL,
y = "Cross-correlation",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS"),
name = NULL
) +
theme(legend.position=c(.7,.4))
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","crosscorrelation_plot.jpg"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
CRplot +
labs(
title = NULL,
y = "Cross-correlation",
x = "Time interval (h)"
) +
scale_fill_discrete(
labels = c("SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS"),
name = NULL  # removes legend title
) +
scale_color_discrete(
labels = c("SDERS.affect" = "S-DERS -> affect", "affect.SDERS" = "affect -> S-DERS"),
name = NULL
) +
theme(legend.position=c(.7,.4))
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","crosscorrelation_plot.jpg"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
NEOplot <- createInteractionPlot(stressModel_NEO, interactionTerm = NEO_scaled, interactionLabel = "Neuroticism")
NEOplot
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","neuroticism_plot.jpg"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
# trait DERS
stressModel_traitDERS <- lme(data=df, S.DERS_Total_scaled ~ stressors_PMcen_scaled*DERS_scaled + stressors_PM_scaled*DERS_scaled,
random = list(PARTICIPANT_ID =~ stressors_PMcen_scaled, DayInd =~1), na.action=na.exclude, control=lmeControl(msMaxIter = 100, opt = "optim"))
summary(stressModel_traitDERS)
intervals(stressModel_traitDERS)
DERSplot <- createInteractionPlot(stressModel_traitDERS, interactionTerm = DERS_scaled, interactionLabel = "DERS")
DERSplot
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","DERS.png"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
DERSplot + theme_minimal()
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","DERS.png"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
DERSplot + theme_minimal() + theme(legend.position = c(0.95, 0.02))
DERSplot + theme_minimal() + theme(legend.position = c(0.7, 0.2))
DERSplot + theme_minimal() + theme(legend.position = c(0.8, 0.2))
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","DERS.png"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
DERSplot + theme_minimal() + theme(legend.position = c(0.8, 0.2)) + theme(
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",
legend.key = element_blank(),
legend.text = element_text(size = 10)
)
DERSplot + theme_minimal() + theme(legend.position = c(0.8, 0.2)) +
theme(
panel.grid.major = element_line(color = "grey85", size = 0.3),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.position = "right",
legend.key = element_blank(),
legend.text = element_text(size = 10)
)
DERSplot + theme_minimal() + theme(legend.position = c(0.8, 0.2))
DERSplot + theme_bw() + theme(legend.position = c(0.8, 0.2))
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","DERS.png"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
DERSplot + theme_bw() + theme(legend.position = "top", legend.direction = "horizontal")
ggsave(
filename = here("manuscripts", "SDERSvalid_dailyLife","figures","DERS.png"),
device = "jpg",
width = 8.5,
height = 8,
units = "cm",
dpi = 600
#compression = "lzw"
)
